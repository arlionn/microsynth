'HOUSEHOLDS', 'FAMILYHOUS', 'FEMALE_HOU', 'RENTER_HOU', 'VACANT_HOU')
ids.t <- names(table(seattledmi$ID[seattledmi$Intervention==1]))
ids.c <- names(table(seattledmi$ID[seattledmi$Intervention==0]))
ids.synth <- c(base::sample(ids.t, 1), base::sample(ids.c, 100))
seattledmi.one <- seattledmi[is.element(seattledmi$ID,
as.numeric(ids.synth)), ]
# Apply microsynth to the new macro-level data
# runtime: < 5 minutes
sea8 <- microsynth(seattledmi.one, idvar='ID', timevar='time',
intvar='Intervention',
start.pre=1, end.pre=12, end.post=16,
match.out=match.out[4],
match.covar=cov.var, result.var=match.out[4],
test='lower', perm=250, jack=FALSE,
check.feas=TRUE, use.backup=TRUE,
n.cores = min(parallel::detectCores(), 2))
summary(sea8)
plot_microsynth(sea8)
sea9 <- microsynth(seattledmi.cross, idvar='ID', intvar='Intervention',
match.out=FALSE, match.covar=cov.var, result.var=match.out,
test='lower', perm=250, jack=TRUE,
n.cores = min(parallel::detectCores(), 2))
# View results
summary(sea9)
sea9 <- microsynth(seattledmi.cross, idvar='ID', intvar='Intervention',
match.out=FALSE, match.covar=cov.var, result.var=match.out,
test='lower', perm=250, jack=TRUE,
n.cores = min(parallel::detectCores(), 2))
# View results
summary(sea9)
?microsynth
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check_win_release()
devtools::check()
devtools::check()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
win_check_release()
devtools::"win_check_release()
``
devtools::"win_check_release()
devtools::"win_check_release()
devtools::"win_check_release()
devtools::win_check_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
check()
devtools::check()
library(microsynth)
cov.var <- c('TotalPop', 'BLACK', 'HISPANIC', 'Males_1521',
'HOUSEHOLDS', 'FAMILYHOUS', 'FEMALE_HOU', 'RENTER_HOU', 'VACANT_HOU')
match.out <- c('i_felony', 'i_misdemea', 'i_drugs', 'any_crime')
set.seed(99199) # for reproducibility
# Perform matching and estimation, without permutations or jackknife
# runtime: < 1 min
sea1 <- microsynth(seattledmi,
idvar="ID", timevar="time", intvar="Intervention",
start.pre=1, end.pre=12, end.post=16,
match.out=match.out, match.covar=cov.var,
result.var=match.out, omnibus.var=match.out,
test="lower",
n.cores = min(parallel::detectCores(), 2))
# View results
summary(sea1)
plot_microsynth(sea1)
plot_microsynth(sea1)
plot_microsynth(sea1)
plot_microsynth(sea1)
devtools::check_win_release()
check()
devtools::check()
cov.var <- c('TotalPop', 'BLACK', 'HISPANIC', 'Males_1521',
'HOUSEHOLDS', 'FAMILYHOUS', 'FEMALE_HOU', 'RENTER_HOU', 'VACANT_HOU')
match.out <- c('i_felony', 'i_misdemea', 'i_drugs', 'any_crime')
sea1 <- microsynth(seattledmi,
idvar="ID", timevar="time", intvar="Intervention",
start.pre=1, end.pre=12, end.post=16,
match.out=match.out, match.covar=cov.var,
result.var=match.out, omnibus.var=match.out,
test="lower",
n.cores = min(parallel::detectCores(), 2))
plot_microsynth(sea1)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
devtools::check_win_release()
example(microsynth)
examples(microsynth)
examples(microsynth)
library(microsynth)
example(microsynth)
devtools::document()
build()
devtools::build()
devtools::build()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::check_win_release()
devtools::build()
devtools::build()
devtools::check_win_release()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::check_win_release()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
?microsynth
library(microsynth)
?microsynth
help(package='microsynth')
browseVignettes("microsynth")
help(package='microsynth')
browseVignettes("microsynth")
browseVignettes(microsynth)
library(microsynth)
install.packages('microsynth')
install.packages("microsynth")
library(microsynth)
browseVignettes(microsynth)
browseVignettes("microsynth")
install.packages(c("formatR", "roxygen2"))
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("aggregating variables over time")
# devtools::use_vignette("ensuring model feasibility")
# get packages to clean up code in R/
install.packages("formatR") # autofix
install.packages("lintr") # searches for more things
install.packages('xlsx')
usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP")
usethis::use_package("nleqslv")
usethis::use_package("MASS")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(readr)
# Initial Set-Up ----------------------------------------------------------
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
# check RStudio version
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149") # Check you have the most recent RStudio.
# get new devtools package
devtools::install_github("hadley/devtools")
# devtools::use_vignette("aggregating variables over time")
# devtools::use_vignette("ensuring model feasibility")
# get packages to clean up code in R/
install.packages("formatR") # autofix
install.packages("lintr") # searches for more things
install.packages("rstudioapi")
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(readr)
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
# check RStudio version
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149") # Check you have the most recent RStudio.
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
devtools::install_github("hadley/devtools")
# Dependencies ------------------------------------------------------------
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to intall XLSX/rJava
install.packages('xlsx')
usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP")
usethis::use_package("nleqslv")
usethis::use_package("MASS")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
# Dependencies ------------------------------------------------------------
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to intall XLSX/rJava
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("aggregating variables over time")
# devtools::use_vignette("ensuring model feasibility")
# get packages to clean up code in R/
install.packages("formatR") # autofix
install.packages("lintr") # searches for more things
# get new devtools package
devtools::install_github("hadley/devtools")
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("~/0. Drive/3. Dport Research/Projects/Package/process docs/SeattleStuff/SeattleExampleData.csv")
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(readr)
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(readr)
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
# check RStudio version
install.packages("rstudioapi")
install.packages("rstudioapi")
# check RStudio version
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
install.packages("rstudioapi")
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to intall XLSX/rJava
install.packages('xlsx')
usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP")
usethis::use_package("nleqslv")
usethis::use_package("MASS")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
# use_package("rmr", "Suggests") # this won't force users to install.
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to intall XLSX/rJava
install.packages('xlsx')
usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP")
usethis::use_package("nleqslv")
usethis::use_package("MASS")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
# use_package("rmr", "Suggests") # this won't force users to install.
install.packages("xlsx")
usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP")
usethis::use_package("nleqslv")
usethis::use_package("MASS")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("~/0. Drive/3. Dport Research/Projects/Package/process docs/SeattleStuff/SeattleExampleData.csv")
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("introduction")
library(tidyverse)
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("~/0. Drive/3. Dport Research/Projects/Package/process docs/SeattleStuff/SeattleExampleData.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
# clean seattledmi to fix its Intervention var.
devtools::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
# clean seattledmi to fix its Intervention var.
?devtools::use_data(seattledmi, overwrite=T)
?devtools
?usethis
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("~/0. Drive/3. Dport Research/Projects/Package/process docs/SeattleStuff/SeattleExampleData.csv")
load("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/microsynth/data/seattledmi.rda")
write_csv(seattledmi, "/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
formatR::tidy_dir("R")
devtools::document() # build docs
# CTRL + SHIFT + B to re-build package, including doc, install, and reload R
# lintr::lint_package()
devtools::check()
formatR::tidy_dir("R")
devtools::document() # build docs
# CTRL + SHIFT + B to re-build package, including doc, install, and reload R
# lintr::lint_package()
devtools::check()
formatR::tidy_dir("R")
devtools::document() # build docs
# CTRL + SHIFT + B to re-build package, including doc, install, and reload R
# lintr::lint_package()
devtools::check()
?use_version
use_version()
usethis::use_version()
usethis::use_version()
formatR::tidy_dir("R")
devtools::document() # build docs
# CTRL + SHIFT + B to re-build package, including doc, install, and reload R
# lintr::lint_package()
devtools::check()
formatR::tidy_dir("R")
devtools::document() # build docs
devtools::build(vignettes=T)
devtools::build_win(version="R-release")
build_win(version="R-release")
devtools::install_github("hadley/devtools")
devtools::build_win(version="R-release")
# Release Package ---------------------------------------------------------
devtools::build(vignettes=T)
# CTRL + SHIFT + B to re-build package, including doc, install, and reload R
# lintr::lint_package()
devtools::check()
# description -------------------------------------------------------------
use_desription()
# description -------------------------------------------------------------
use_description()
# description -------------------------------------------------------------
usethis::use_description()
edit_r_profile()
create_package()
# description -------------------------------------------------------------
?usethis::use_description()
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
language="en"))
library(usethis)
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
language="en"))
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
language="en"))
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
Description="A generalization of the 'Synth' package that is designed for data at a more granular level (e.g., micro-level). Provides functions to construct weights (including propensity score-type weights) and run analyses for synthetic control methods with micro- and meso-level data; see Robbins, Saunders, and Kilmer  (2017) <doi:10.1080/01621459.2016.1213634>."
language="en"))
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
Description="A generalization of the 'Synth' package that is designed for data at a more granular level
(e.g., micro-level). Provides functions to construct weights (including propensity score-type weights)
and run analyses for synthetic control methods with micro- and meso-level data; see Robbins, Saunders,
and Kilmer  (2017) <doi:10.1080/01621459.2016.1213634> and Robbins and Davenport (2021)
<doi:10.18637/jss.v097.i02>.",
language="en"))
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
Description="A generalization of the 'Synth' package that is designed for data at a more granular level
(e.g., micro-level). Provides functions to construct weights (including propensity score-type weights)
and run analyses for synthetic control methods with micro- and meso-level data; see Robbins, Saunders,
and Kilmer  (2017) <doi:10.1080/01621459.2016.1213634> and Robbins and Davenport (2021)
<doi:10.18637/jss.v097.i02>.",
Version="2.0.14",
language="en"))
# make package
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(readr)
# Initial Set-Up ----------------------------------------------------------
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
# check RStudio version
install.packages("rstudioapi")
# rstudioapi::isAvailable("0.99.149") # Check you have the most recent RStudio.
# get new devtools package
devtools::install_github("hadley/devtools")
# make package
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
library(xlsx)
library(readr)
# Initial Set-Up ----------------------------------------------------------
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
# Load libaries -----------------------------------------------------------
library(devtools)
library(roxygen2)
# library(xlsx)
library(readr)
# Get needed packages
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr", "usethis"))
# check RStudio version
install.packages("rstudioapi")
# rstudioapi::isAvailable("0.99.149") # Check you have the most recent RStudio.
# get new devtools package
devtools::install_github("hadley/devtools")
# description -------------------------------------------------------------
library(usethis)
use_description(fields=list(
`Authors@R`=c(person("Michael", "Robbins", email="mrobbins@rand.org", role = c("aut", "cre")),
person("Steven", "Davenport", email="ssdport@gmail.com", role = c("aut"))),
License = "GPL-3",
Title="Synthetic Control Methods with Micro- And Meso-Level Data",
Description="A generalization of the 'Synth' package that is designed for data at a more granular level
(e.g., micro-level). Provides functions to construct weights (including propensity score-type weights)
and run analyses for synthetic control methods with micro- and meso-level data; see Robbins, Saunders,
and Kilmer  (2017) <doi:10.1080/01621459.2016.1213634> and Robbins and Davenport (2021)
<doi:10.18637/jss.v097.i02>.",
Version="2.0.14",
language="en"))
# Dependencies ------------------------------------------------------------
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to intall XLSX/rJava
install.packages('xlsx')
usethis::use_package("boot")
usethis::use_package("survey")
usethis::use_package("kernlab")
usethis::use_package("LowRankQP")
usethis::use_package("nleqslv")
usethis::use_package("MASS")
usethis::use_package("stats")
usethis::use_package("parallel")
usethis::use_package("utils")
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
# use_package("rmr", "Suggests") # this won't force users to install.
# Add Dataset -------------------------------------------------------------
# Create /vignettes, add dependencies to DESCRIPTION
# devtools::use_vignette("introduction")
library(tidyverse)
# import the DMI data (csv) and make to an RData
seattledmi <- read_csv("/Users/macbookpro/Google Drive/Data Science/Synthetic Controls/seattledmi.csv")
# seattledmi <- read_csv("../SeattleStuff/SeattleExampleData.csv")
seattledmi$Intervention[seattledmi$Intervention==1 & seattledmi$time<=11] <- 0
# clean seattledmi to fix its Intervention var.
usethis::use_data(seattledmi, overwrite=T)
tools::checkRdaFiles("data")
# check compression method/size for data files. should be under 1 MB
# Checking Package Docs and Health -----------------------------------------
formatR::tidy_dir("R")
devtools::document() # build docs
# CTRL + SHIFT + B to re-build package, including doc, install, and reload R
# lintr::lint_package()
devtools::check()
# Release Package ---------------------------------------------------------
devtools::build(vignettes=T)
library(xlsx)
library(rJava)
# Dependencies ------------------------------------------------------------
# install.packages(c('kernlab', 'LowRankQP', 'nleqslv'))
Sys.setenv(JAVA_HOME="") # to intall XLSX/rJava
install.packages('xlsx')
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
usethis::use_package("knitr", "Suggests") # this won't force users to install.
install.packages('xlsx')
usethis::use_package("xlsx", "Suggests") # this won't force users to install.
